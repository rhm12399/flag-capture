<<<<<<< HEAD
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="flag-capture">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../Applications/eclipse 2"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.7"/>
    <property name="source" value="1.7"/>
    <path id="flag-capture.classpath">
        <pathelement location="bin"/>
        <pathelement location="lib/junit.jar"/>
        <pathelement location="lib/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="flag-capture.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="CreateTwoPofiles">
        <java classname="tests.CreateTwoPofiles" failonerror="true" fork="yes">
            <classpath refid="flag-capture.classpath"/>
        </java>
    </target>
    <target name="GameTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="tests.GameTest" todir="${junit.output.dir}"/>
            <classpath refid="flag-capture.classpath"/>
        </junit>
    </target>
    <target name="RunCaptureTheFlagFrame (2)">
        <java classname="view.RunCaptureTheFlagFrame" failonerror="true" fork="yes">
            <classpath refid="flag-capture.classpath"/>
        </java>
    </target>
    <target name="tests">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="tests.GameTest" todir="${junit.output.dir}"/>
            <test name="tests.UnitTest" todir="${junit.output.dir}"/>
            <classpath refid="flag-capture.classpath"/>
        </junit>
    </target>
    <target name="UnitTest (1)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="tests.UnitTest" todir="${junit.output.dir}"/>
            <classpath refid="flag-capture.classpath"/>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
=======
<?xml version="1.0"?>
<project name="Ant-Test" default="main" basedir=".">
	<!-- Sets variables which can later be used. -->
	<!-- The value of a property is accessed via ${} -->
	<property name="src.dir" location="src" />
	<property name="build.dir" location="bin" />

	<!-- Variables used for JUnit testing -->
	<property name="test.dir" location="src" />
	<property name="test.report.dir" location="testreport" />

	<!-- Define the classpath which includes the junit.jar and the classes after compiling-->
	<path id="junit.class.path">
		<pathelement location="lib/junit.jar" />
		<pathelement location="lib/org.hamcrest.core_1.3.0.v201303031735.jar" />
		<pathelement location="${build.dir}" />
	</path>

	<!-- Deletes the existing build, docs and dist directory-->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${test.report.dir}" />
	</target>

	<!-- Creates the  build, docs and dist directory-->
	<target name="makedir">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${test.report.dir}" />
	</target>

	<!-- Compiles the java code (including the usage of library for JUnit -->
	<target name="compile" depends="clean, makedir">
		<javac srcdir="${src.dir}" destdir="${build.dir}">
			<classpath refid="junit.class.path" />
		</javac>

	</target>

	<!-- Run the JUnit Tests -->
	<!-- Output is XML, which loads up in Eclipse nicely. Format could also be plain-->
	<target name="junit" depends="compile">
		<junit printsummary="on" fork="true" haltonfailure="yes">
			<classpath refid="junit.class.path" />
			<formatter type="xml" />
			<batchtest todir="${test.report.dir}">
				<fileset dir="${src.dir}">
					<include name="**/*Test*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- Added to get rid of the error on Travis -->
	<target name="test" depends="compile, junit">
		<description>Added to avoid Travis Error, at least I hope</description>
	</target>

	<!-- But I appear to need this for local builds -->
	<target name="main" depends="compile, junit">
		<description>Main target</description>
	</target>

</project>
>>>>>>> a5944851fbb5b178becdb30d4e9679f1e0b03e5d
